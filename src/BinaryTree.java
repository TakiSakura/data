public class BinaryTree<T> extends Object {    public BinaryNode<T> root;    public BinaryTree() {        this.root = null;    }    public boolean isEmpty() {        return this.root == null;    }    public void insert(T x) {        if (x != null) this.root = new BinaryNode<T>(x, this.root, null);    }    public BinaryNode<T> insert(BinaryNode<T> p, boolean left, T x) {        if (x == null || p == null) return null;        if (left) return p.left = new BinaryNode<T>(x, p.left, null);        return p.right = new BinaryNode<T>(x, null, p.right);    }    public void remove(BinaryNode<T> p, boolean left) {        if (p != null) {            if (left) {                System.out.println("删除子树：" + toString(p.left));                p.left = null;            } else {                System.out.println("删除子树：" + toString(p.right));                p.right = null;            }        }    }    public void clear() {        this.root = null;    }    public void preorder() {        preorder(this.root);    }    public void preorder(BinaryNode<T> p) {        if (p != null) {            System.out.println(p.data.toString() + " ");            preorder(p.left);            preorder(p.right);        }    }    public void inorder() {        inorder(this.root);    }    public void inorder(BinaryNode<T> p) {        if (p != null) {            inorder(p.left);            System.out.println(p.data.toString() + " ");            inorder(p.right);        }    }    public void postorder() {        postorder(this.root);    }    public void postorder(BinaryNode<T> p) {        if (p != null) {            postorder(p.left);            postorder(p.right);            System.out.println(p.data.toString() + " ");        }    }    public String toString()           //返回先根次序遍历二叉树所有结点的描述字符串，包含空子树标记    {        return "先根次序遍历二叉树：" + toString(this.root);    }    public String toString(BinaryNode<T> p)     //返回先根次序遍历以p为根子树的描述字符串，递归方法    {        if (p == null) return "∧";                         //输出空子树标记        return p.data.toString() + " " + toString(p.left) + toString(p.right);    }}